#!/usr/bin/env ruby
# frozen_string_literal: true

require 'dynamic-active-model'
require 'optparse'
require 'yaml'

DEFAULT_CONFIG_FILE = "#{ENV['HOME']}/.dynamic-db-explorer.yml".freeze

options = {
  base_module: Object,
  connection_options: {},
  skip_tables: [],
  relationships: {},
  config_file: nil,
  config_section: nil,
  class_files_dir: nil,
  id_suffix: nil
}

# rubocop:disable Metrics/BlockLength
OptionParser.new do |opts|
  opts.banner = 'Usage: dynamic-db-explorer'

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end

  opts.on('--username USERMNAME', 'DB username') do |v|
    options[:connection_options][:username] = v
  end

  opts.on('--host HOST', 'DB host') do |v|
    options[:connection_options][:host] = v
  end

  opts.on('--port PORT', 'DB port') do |v|
    options[:connection_options][:port] = v
  end

  opts.on('--password PASSWORD', 'DB password') do |v|
    options[:connection_options][:password] = v
  end

  opts.on('--adapter ADAPTER', 'DB adapter') do |v|
    options[:connection_options][:adapter] = v
  end

  opts.on('--database DATABASE', 'DB name') do |v|
    options[:connection_options][:database] = v
  end

  opts.on('--url CONNECTION_URL', 'DB connection url') do |v|
    options[:connection_options]['url'] = v
  end

  opts.on('--module MODULE_NAME', 'module name') do |v|
    Object.const_set(v, Module.new)
    options[:base_module] = Object.const_get(v)
  end

  opts.on('--id-suffix ID_SUFFIX', 'foreign key ID pattern') do |v|
    options[:id_suffix] = v
  end

  opts.on('-c', '--config FILE', "config file, default #{DEFAULT_CONFIG_FILE}") do |v|
    options[:config_file] = v
  end

  opts.on('-s', '--section SECTION', 'config file section') do |v|
    options[:config_file] = DEFAULT_CONFIG_FILE if !options[:config_file] && File.exist?(DEFAULT_CONFIG_FILE)
    options[:config_section] = v
  end

  opts.on('--create-class-files DIR', 'Create ActiveRecord class files') do |v|
    raise("#{v} not found") unless File.exist?(v)

    options[:class_files_dir] = v
  end
end.parse!
# rubocop:enable Metrics/BlockLength

DynamicActiveModel::ForeignKey.id_suffix = options[:id_suffix] if options[:id_suffix]

if options[:config_file]
  raise('must specify a section') unless options[:config_section]

  config = YAML.load_file(options[:config_file])[options[:config_section]]
  options[:skip_tables] = config.delete('skip_tables') || []
  options[:relationships] = config.delete('relationships') || {}
  if (module_name = config.delete('module'))
    Object.const_set(module_name, Module.new)
    options[:base_module] = Object.const_get(module_name)
  end
  options[:connection_options] = config.transform_keys(&:to_sym)
end

DYNAMIC_DATABASE = DynamicActiveModel::Explorer.explore(
  options[:base_module],
  options[:connection_options],
  options[:skip_tables],
  options[:relationships]
)

if options[:class_files_dir]
  DYNAMIC_DATABASE.models.each do |model|
    DynamicActiveModel::TemplateClassFile.new(model).create_template!(options[:class_files_dir])
  end
else
  require 'irb'
  IRB.start(__FILE__)
end
